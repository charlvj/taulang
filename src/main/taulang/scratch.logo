/* Lambda variable and call */
make myprintline lambda [ :message ] [ printline [ "[Me] " message ]
call myprintline [ "Hello World!" ]

/* lambda and call */
call 
    lambda [ :message ] 
           [ printline [ "[Me] " message ] ] 
    [ "Hello World!" ]

/* calling a function */
call :printline [ "Hello World!" ]

/* calling a list */
run [ something somethingelse ]




make :Person object [
    make :firstname "N/A"
    make :lastname "N/A"
    make :initial ""
    ]
to :Person.fullname [:person] [ concat [ lastname ", " firstname " " initial ] ]

make :charl new Person [
    make :firstname "Charl"
    make :lastname "van Jaarsveldt"
    ]

make :lynelle new Person [
    make :firstname "Lynelle"
    make :initial "Marie"
    make :lastname "van Jaarsveldt"
    ]

printline [ Person.fullname charl " and " Person.fullname lynelle " are married." ]
/* van Jaarsveldt, Charl and van Jaarveldt, Lynelle Marie are married */






/* import "stdlib.tau" "system" */

/*
alias :p :print

p "From the alias."

make :code [ printline "yay" ]
call code []

make :n 5
printline inc n

times 3 [ printline "Yadda" ]

print [ "Current context: " system.memory.currentcontext newline ]

printline "Doing a printline"

print [ "Current context: " system.memory.currentcontext newline ]


call :printline [ "Hello World from a call!" ]

calllist [ print 1 print 2 print newline ]

call 
    lambda [ :message ] 
           [ printline [ "[Lambda] " message ] ] 
    [ "Hello World!" ]

make :myprintline lambda [ :message ] [ printline [ "[MyPrintLine] " message ] ]
call myprintline [ "Hello World!" ]

call [ print $0 print $1 print $2 print newline ] [ "Een" "twee" "drie" ]

print [ true false ]

if true [ printline "Yes!" ] [ printline "No!" ]
if false [ printline "Yes!" ] [ printline "No!" ]

to :then [:code] [code]
to :else [:code] [code]
to :elseif [:condition :thencode :elsecode]
  [ if condition thencode elsecode ]

if false then [ printline "in then" ] else [ printline "in else" ]


/*
printline "What is your name?"
make :name readline
if 
    eq "Charl" name 
    [printline "So glad to see you!"]
elseif 
    eq "Lynelle" name
    [ printline "Hello, good looking." ]
else [ printline [ "Hello, " name ". Please take me to your master."] ]
*/


to :fac
    [ :n ]
    [ if eq 1 n
        [1]
        [ mult n fac dec n ]
    ]
make :n 6
printline [ n "! = " fac n ]


printline [ "2^2 = " sqr 2 ]
printline [ "2^3 = " pow 2 3 ]
printline [ "abs(10) = " abs 10]
printline [ "abs(-10) = " abs -10]

/*
to :fib
    [:n]
    [
        if eq n 1
            then [1]
            elseif eq n 2
            then [1]
            else [
                plus
                    fib minus n 1
                    fib minus n 2
            ]
    ]
printline [ "fib(" n ") = " fib n ]
print "Done."
*/
*/








/* print [ "In test.logo" newline ]
printline "printline works..."

printline "Let us check some math stuff "
*/

system.memory.dump

print "Hello?"
printline "Hello!"

printline [ "inc 2 = " inc 2 ]
printline [ "dec 2 = " dec 2 ]

print [ "3 + 4 + 5 = " plus 3 plus 4 5 ]


alias :p :print

p "From the alias."

make :code [ printline "yay" ]
call code []

make :n 5
printline inc n

times 3 [ printline "Yadda" ]

print [ "Current context: " system.memory.currentcontext newline ]

printline "Doing a printline"

print [ "Current context: " system.memory.currentcontext newline ]


call :printline [ "Hello World from a call!" ]

calllist [ print 1 print 2 print newline ]

call 
    lambda [ :message ] 
           [ printline [ "[Lambda] " message ] ] 
    [ "Hello World!" ]

make :myprintline lambda [ :message ] [ printline [ "[MyPrintLine] " message ] ]
call myprintline [ "Hello World!" ]

call [ print $0 print $1 print $2 print newline ] [ "Een" "twee" "drie" ]

print [ true false ]

if true [ printline "Yes!" ] [ printline "No!" ]
if false [ printline "Yes!" ] [ printline "No!" ]

to :then [:code] [code]
to :else [:code] [code]
to :elseif [:condition :thencode :elsecode]
  [ if condition thencode elsecode ]

if false then [ printline "in then" ] else [ printline "in else" ]


/*
printline "What is your name?"
make :name readline
if 
    eq "Charl" name 
    [printline "So glad to see you!"]
elseif 
    eq "Lynelle" name
    [ printline "Hello, good looking." ]
else [ printline [ "Hello, " name ". Please take me to your master."] ]
*/


to :fac
    [ :n ]
    [ if eq 1 n
        [1]
        [ mult n fac dec n ]
    ]
make :n 6
printline [ n "! = " fac n ]


printline [ "2^2 = " sqr 2 ]
printline [ "2^3 = " pow 2 3 ]
printline [ "abs(10) = " abs 10]
printline [ "abs(-10) = " abs -10]


print "Repeating: "
repeat 10 [ print [ $1 " " ] ] printline "."




define_object :Name [ :first_name :last_name ]
[ make :id next_id
  
  to :full_name [] [ join [first_name last_name] ", " ]
  to :equals [:other]
  [ and
      eq first_name .first_name other
      eq last_name  .last_name other
  ]
]
expose_object :Name [:id :full_name :equals]

make :p1 Name "John" "Smith"
make :p2 Name "John" "Doe"
printline ["Person " Name.id p1 ": " Name.full_name p1]
printline ["Person " Name.id p2 ": " Name.full_name p2]
printline ["Equals? " Name.equals p1 p2]



define_object :ListStream [:list]
[ push_prototype Stream
  
  make :current_pos 0
  
  to :has_next [] [ gt size list current_pos ]
  to :next [] 
  [ make :current_pos inc current_pos
    getelem list current_pos
  ]
]

.foreach ListStream [1 2 3 4] [:element]
  [ printline ["Number " element] ]