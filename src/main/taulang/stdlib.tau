to :printline
    [ :msg ] 
    [ if is_null msg
      [ print "<null>" ]
      [ print msg ]
      print newline
    ] 
expose :printline

to :calllist
    [ :list ]
    [ call list [ ] ]
expose :calllist

to :times
    [ :i :code ]
    [ print [ "i=" i " " ]
      if eq i 1 
        [ call code [] ]
        [ call code []
          times dec i code ]
    ]
expose :times

to :required [:param]
  [ if is_null param
    [ throw_error "Parameter must be provided" ]
    [ param ]
  ]
expose :required

to :require_integer [:param]
  [ if is_integer param 
    [ param ]
    [ throw_error "Integer parameter is required" ]
  ]
expose :require_integer

to :require_double [:param]
  [ if is_double param 
    [ param ]
    [ throw_error "Double parameter is required" ]
  ]
expose :require_double

to :require_logical [:param]
  [ if is_logical param 
    [ param ]
    [ throw_error "Logical parameter is required" ]
  ]
expose :require_logical


to :require_list [:param]
  [ if is_list param 
    [ param ]
    [ throw_error "List parameter is required" ]
  ]
expose :require_list

to :require_stream [:param]
  [ if is_stream param 
    [ param ]
    [ throw_error "Stream parameter is required" ]
  ]
expose :require_stream

to :ifnull [:param :default]
  [ if is_null param 
    [ default ]
    [ param ]
  ]
expose :ifnull

to :try_catch [:try_code :catch_code]
[ make :result call try_code [] 
  if is_error result
  [ call :catch_code [ result ] ]
  [ result ]
]
expose :try_catch

to :pushelem [:elem :list]
[ concat [elem] list ]
expose :pushelem

to :appendelem [:elem :list]
[ concat list [elem] ]
expose :appendelem

to :ne [:a :b]
[ not eq a b ]
expose :ne