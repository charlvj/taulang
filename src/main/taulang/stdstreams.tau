
to :for_each [:stream :code]
[ make :s if is_list stream 
          [ list_to_stream stream ] 
          [ stream ]
  require_stream s
  while [has_next s]
  [ call code [next s] ]
]
expose :for_each


to :limit [:number :ds]
[ new_stream_source [5] 
    lambda [:number] 
    [ and 
        has_next ds 
        gt number 0 
    ]
    lambda [:number] 
    [ [ next ds
  	    [ dec number ]
  	  ]
    ]
]
expose :limit


to :map [:func :ds]
[ new_stream_source []
    lambda [] [ has_next ds ]
    lambda [] [ call func next ds ]
]
expose :map


to :next_until [:func :ds]
[ if has_next ds
  [ make :next_value next ds
    if call func [ next_value ]
    [ next_value ]
    [ next_until :func ds ]
  ]
  [ throw_error "End of the stream reached." ]
]
expose :next_until

/*
to :filter [:func :ds]
[ make :next_value ?
  new_stream_source []
    lambda [] 
    [ make :
      has_next ds 
    ]
    lambda [] [ next_value ]
] 
*/

to :range [:from :to_exclusive]
[ new_stream_source [from]
    lambda [:current] [ lt current to_exclusive ]
    lambda [:current] [
      [ current
        [inc current] ]
    ]
]
expose :range


to :range_closed [:from :to]
[ range from inc to ]
expose :range_closed


to :repeat [:times :code]
[ for_each range 0 times
  lambda [:i] [ call code [i] ]
]
expose :repeat


to :stream_counter [:start :stream]
[ new_stream_source [start]
  lambda [:counter_value] [ has_next stream ]
  lambda [:counter_value] 
  [ 
  	[ dict [:counter counter_value :value next stream] 
  	  [inc counter_value]
  	]
  ]
]
expose :stream_counter