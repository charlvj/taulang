to :dec [:n] [minus n 1]
expose :dec

to :inc [:n] [plus n 1]
expose :inc

to :sqr [:n] [mult n n]
expose :sqr

to :pow [:n :p] [
  if eq p 1 
    [ n ]
    [ mult n pow n dec p ]
  ]
expose :pow

to :abs [:n]
  [ if lt n 0 [mult -1 n] [n] ]
expose :abs

to :sum [:numbers]
[ collect
    0
    lambda [:state :elem] [plus state elem]
    if is_stream numbers [numbers] [list_to_stream numbers]
]
expose :sum

to :faculty [:n]
[ if eq 2 n 
    [ 2 ]
    [ mult n faculty minus n 1 ]
]
expose :faculty

to :random []
[ next randomizer ]
expose :random

to :random_int [:max]
[ round mult max next randomizer ]
expose :random_int