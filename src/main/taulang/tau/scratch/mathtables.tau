/**
 This is a simple "times-table" program to show the table and test you.
 */
 
import "basicapp.tau" ""
 
make :menu 
[ ["1. Test Me!" :run_test ]
  ["2. Show Table" :show_table ]
  ["3. Show Settings" :show_settings]
  ["4. Change Topic" :change_topic]
  ["5. Change Max" :change_max]
  ["6. Quit" :quit]
]

to :initial_state []
[ dict 
  [ :quit false 
    :topic 2
    :max 12 
    :operator @mult
    :operator_descr "x"
  ]
]



to :get_command []
[ print_menu
  print ""
  make :choice readline
  printline ["choice: |" choice "|"] 
  make :command
  	try_catch
  	[ getelem menu dec as_integer choice ]
    [ ["Invalid" :invalid_choice] ]
  printline ""
  command
]


to :run_test [:state]
[ print "Test!"
  make :topic get state :topic
  /* for_each range_closed 0 get state :max */
  times get state :max
  [ make :current random_int get state :max
    make :real_answer mult topic current
    print [ current " x " topic " = " ]
    make :answer readline
    try_catch 
    [ make :int_answer as_integer answer
      if eq real_answer int_answer
      [ printline "Correct!" ]
      [ printline "Incorrect." ]
    ]
    [ printline "Invalid answer!" ]
  ]
  state
]



to :show_table [:state]
[ printline "The Table!"
  make :topic get state :topic
  for_each range_closed 0 get state :max
  [ make :op get state :operator
    make :answer call op [topic $0]
    printline [ $0 " x " topic " = " answer ]
  ]
  state
]


to :show_settings [:state]
[ make :topic get state :topic
  make :max   get state :max
  
  printline "Current Settings"
  printline "----------------"
  printline ["Topic: " topic]
  printline ["Max:   " max]
  state
]


to :change_topic [:state]
[ print "Please enter the new topic (times-table): "
  try_catch
  [ make :new_value as_integer readline
    put state [:topic new_value]
  ]
  [ printline "Invalid: I expected a number"
    state
  ]
]


to :change_max [:state]
[ print "Please enter the new max: "
  try_catch
  [ make :new_value as_integer readline
    put state [:max new_value]
  ]
  [ printline "Invalid: I expected a number"
    state
  ]
]


to :change_operator [:state]
[ print "Please enter the operator to use (+ - x /) : "
  make :op_descr readline
  state
]


to :quit [:state]
[ put state [:quit true]
]


to :invalid_choice [:state]
[ printline "Invalid Choice" 
]


to :print_menu [:state]
[ printline 
  [ newline 
    "    Menu    " newline 
    "============" ]
  for_each menu
  [ printline menu_description $0 
  ]
  print " > "
]

to :menu_description [:menu_item]
[ getelem menu_item 0 
]

to :menu_command [:menu_item]
[ getelem menu_item 1
]




app_loop
  initial_state
  lambda [:state]
  [ make :command get_command
    make :f menu_command command
    make :new_state call f [state]
    if get new_state :quit [false] [new_state]
  ]


